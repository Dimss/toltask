import groovy.json.JsonOutput

def getJobName() {
    def jobNameList = env.JOB_NAME.split("/")
    if (jobNameList.size() > 0) {
        return jobNameList[jobNameList.size() - 1]
    } else {
        return jobName
    }
}

def getAppName() {
    if (env.gitlabActionType == "TAG_PUSH") {
        return "${getJobName()}-${getGitTag()}".replaceAll("\\.", "-")
    } else {
        return "${getJobName()}-${getGitCommitShortHash()}".replaceAll("\\.", "-")
    }
}

def getLatestRouteHost() {
    if (env.gitlabActionType == "TAG_PUSH") {
        return "coreapitest-lab.apps.openshift.sales.lab.tlv.redhat.com"
    } else {
        return "coreapitest-dev-latest.apps.openshift.sales.lab.tlv.redhat.com"
    }
}

def getLatestRouteName() {
    if (env.gitlabActionType == "TAG_PUSH") {
        return "coreapitest-lab"
    } else {
        return "coreapitest-latest-dev"
    }
}

def getConfSecretName() {
    if (env.gitlabActionType == "TAG_PUSH") {
        return "coreapitest-lab"
    } else {
        return getAppName()
    }
}

def getGitCommitShortHash() {
    return checkout(scm).GIT_COMMIT.substring(0, 7)
}

def getGitTag() {
    if (env.gitlabActionType == "TAG_PUSH") {
        def tagPathList = env.gitlabSourceBranch.split("/")
        return tagPathList[tagPathList.size() - 1]
    } else {
        return ""
    }
}

def getMongoServiceName() {
    return "mongodb-${getGitCommitShortHash()}"
}

def getMongoUserAndPass() {
    return "app"
}

def getMongoDbName() {
    return "coreapitestdb"
}

def getProfile() {
    if (env.gitlabActionType == "TAG_PUSH") {
        return "lab"
    } else {
        return "dev"
    }
}

def getCiInfraDeps() {

    def models = openshift.process("openshift//mongodb-ephemeral",
            "-p=DATABASE_SERVICE_NAME=${getMongoServiceName()}",
            "-p=MONGODB_USER=${getMongoUserAndPass()}",
            "-p=MONGODB_PASSWORD=${getMongoUserAndPass()}",
            "-p=MONGODB_DATABASE=${getMongoDbName()}")
    echo "${JsonOutput.prettyPrint(JsonOutput.toJson(models))}"
    return models
}

def getDockerImageTag() {
    return "${getGitCommitShortHash()}-${currentBuild.number}"
}

pipeline {
    agent {
        node {
            label 'dotnet22'
        }
    }
    stages {

        stage("Deploy tests infra dependencies") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.create(getCiInfraDeps())
                            echo "================== dc/${getMongoServiceName()} ================="
                            def dc = openshift.selector("dc/${getMongoServiceName()}")
                            dc.untilEach(1) {

                                echo "***************************************"
                                echo "${JsonOutput.prettyPrint(JsonOutput.toJson(it.object().status))}"
                                echo "***************************************"

                                if (it.object().status.availableReplicas == 1) {
                                    echo "***************** they are equal *****************"
                                    echo "${JsonOutput.prettyPrint(JsonOutput.toJson(it.object().status))}"
                                    return true
                                }
                                return false
                            }
                        }
                    }
                }
            }
        }

//        stage("Run tests") {
//            steps {
//                script {
//                    sh """
//                        export ControllerSettings__DbConfig__DbConnectionString=mongodb://${getMongoUserAndPass()}:${
//                        getMongoUserAndPass()
//                    }@${getMongoServiceName()}:27017/${getMongoDbName()}
//                        export ControllerSettings__DbConfig__DbName=${getMongoDbName()}
//                        cd coreapitest/app.tests && dotnet test
//                    """
//                }
//            }
//        }
//
//        stage("Cleanup test resources") {
//            steps {
//                script {
//                    openshift.withCluster() {
//                        openshift.withProject() {
//                            openshift.delete(getCiInfraDeps())
//                        }
//                    }
//                }
//            }
//        }
//
//        stage("Create S2I image stream and build configs") {
//            steps {
//
//                script {
//                    openshift.withCluster() {
//                        openshift.withProject() {
//                            def icBcTemplate = readFile('coreapitest/ocp/ci/app-is-bc.yaml')
//                            def models = openshift.process(icBcTemplate,
//                                    "-p=BC_IS_NAME=${getAppName()}",
//                                    "-p=DOCKER_REGISTRY=${env.DOCKER_REGISTRY}",
//                                    "-p=DOCKER_IMAGE_NAME=/${env.DOCKER_IMAGE_PREFIX}/coreapitest",
//                                    "-p=DOCKER_IMAGE_TAG=${getDockerImageTag()}",
//                                    "-p=GIT_REPO=${scm.getUserRemoteConfigs()[0].getUrl()}",
//                                    "-p=GIT_REF=master",
//                                    "-p=S2I_BUILDER_ISTAG=${env.S2I_BUILD_IMAGE}"
//                            )
//                            echo "${JsonOutput.prettyPrint(JsonOutput.toJson(models))}"
//                            openshift.create(models)
//                            def bc = openshift.selector("buildconfig/${getAppName()}")
//                            def build = bc.startBuild()
//                            build.logs("-f")
//                            bc = openshift.selector("buildconfig/${getAppName()}")
//                            echo "${JsonOutput.prettyPrint(JsonOutput.toJson(bc))}"
//                            openshift.delete(models)
//                        }
//                    }
//                }
//            }
//        }
//
//        stage("Deploy to OpenShift") {
//            steps {
//                script {
//                    openshift.withCluster() {
//                        openshift.withProject() {
//                            // Deploy mongo
//                            openshift.create(getCiInfraDeps())
//                            def dc = openshift.selector("dc/${getMongoServiceName()}")
//                            // Deploy application
//                            def image = "${env.DOCKER_REGISTRY}/${env.DOCKER_IMAGE_PREFIX}/coreapitest:${getDockerImageTag()}"
//                            def name = "coreapitest-${getGitCommitShortHash()}"
//                            def monogUser = getMongoUserAndPass()
//                            def mongoPass = getMongoUserAndPass()
//                            def monogDbName = getMongoDbName()
//                            def template = readFile('coreapitest/ocp/cd/template.yaml')
//                            echo "${JsonOutput.prettyPrint(JsonOutput.toJson(models))}"
//                            def models = openshift.process(template,
//                                    "-p=IMAGE=${image}",
//                                    "-p=NAME=${name}",
//                                    "-p=MONGO_USER=${monogUser}",
//                                    "-p=MONGO_PASS=${mongoPass}",
//                                    "-p=MONGO_DB=${monogDbName}",
//                            )
//                            openshift.create(models)
//                        }
//                    }
//                }
//            }
//        }
    }

    post {
        failure {
            script {
                openshift.withCluster() {
                    openshift.withProject() {
                        openshift.delete(getCiInfraDeps())
                    }
                }
            }
        }
    }
}
